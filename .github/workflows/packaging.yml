# Unique name for this workflow
name: Packaging

# Workflow starts when receiving custom event sent by CI workflow
on:
  repository_dispatch:
    types: [start-packaging]

permissions:
  issues: write
  pull-requests: write
  contents: write

# Jobs to be executed
jobs:
  release-package-version:
    runs-on: ubuntu-latest
    steps:
      # Install Salesforce CLI
      - name: "Install Salesforce CLI"
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version

      # Checkout the source code
      - name: "Checkout source code"
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.ref }}

      # Install Volta to enforce proper node and package manager versions
      - name: "Install Volta"
        uses: volta-cli/action@v1

      # Generate omnistudio versions of source
      - name: "Automatically generate Omnistudio source"
        run: node ./osfilegen.js

      # Store secret for dev hub
      - name: "Populate auth file with DEVHUB_SFDX_URL secret"
        shell: bash
        run: |
          echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
          secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
          if [ $secretFileSize == 1 ]; then
              echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
              exit 1;
          fi

      # Authenticate dev hub
      - name: "Authenticate Dev Hub"
        run: sfdx auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d

      # Remove auth file
      - name: "Remove auth file"
        run: rm -f ./DEVHUB_SFDX_URL.txt

      # Create package version and extract its id
      - name: "Create package version sfGpsDs"
        id: createPackageVersion-sfGpsDs
        if: ${{ github.event.client_payload.sfGpsDs == 'true' }}
        run: |
          set +e
          json=$(sfdx force:package:version:create -d sfGpsDs -x -w 20 -f config/project-scratch-def.json --codecoverage --json)
          echo $json
          status=$(echo $json | jq '.status')
          if [ $status == "0" ]; then
              packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
              echo "::set-output name=packageVersionId::$packageVersionId"
          else
              echo "sfdx force:package:version:create failed"
          fi
          exit $status

      - name: "Create package version sfGpsDsAuNsw"
        id: createPackageVersion-sfGpsDsAuNsw
        if: ${{ github.event.client_payload.sfGpsDsAuNsw == 'true' }}
        run: |
          set +e
          json=$(sfdx force:package:version:create -d sfGpsDsAuNsw -x -w 20 -f config/project-scratch-def.json --codecoverage --json)
          echo $json
          status=$(echo $json | jq '.status')
          if [ $status == "0" ]; then
              packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
              echo "::set-output name=packageVersionId::$packageVersionId"
          else
              echo "sfdx force:package:version:create failed"
          fi
          exit $status

      - name: "Create package version sfGpsDsAuNswS"
        id: createPackageVersion-sfGpsDsAuNswS
        if: ${{ github.event.client_payload.sfGpsDsAuNswS == 'true' }}
        run: |
          set +e
          json=$(sfdx force:package:version:create -d sfGpsDsAuNswS -x -w 20 -f config/project-scratch-def.json --codecoverage --json)
          echo $json
          status=$(echo $json | jq '.status')
          if [ $status == "0" ]; then
              packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
              echo "::set-output name=packageVersionId::$packageVersionId"
          else
              echo "sfdx force:package:version:create failed"
          fi
          exit $status

      - name: "Create package version sfGpsDsAuVic"
        id: createPackageVersion-sfGpsDsAuVic
        if: ${{ github.event.client_payload.sfGpsDsAuVic == 'true' }}
        run: |
          set +e
          json=$(sfdx force:package:version:create -d sfGpsDsAuVic -x -w 20 -f config/project-scratch-def.json --codecoverage --json)
          echo $json
          status=$(echo $json | jq '.status')
          if [ $status == "0" ]; then
              packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
              echo "::set-output name=packageVersionId::$packageVersionId"
          else
              echo "sfdx force:package:version:create failed"
          fi
          exit $status

      - name: "Create package version sfGpsDsUkGov"
        id: createPackageVersion-sfGpsDsUkGov
        if: ${{ github.event.client_payload.sfGpsDsUkGov == 'true' }}
        run: |
          set +e
          json=$(sfdx force:package:version:create -d sfGpsDsUkGov -x -w 20 -f config/project-scratch-def.json --codecoverage --json)
          echo $json
          status=$(echo $json | jq '.status')
          if [ $status == "0" ]; then
              packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
              echo "::set-output name=packageVersionId::$packageVersionId"
          else
              echo "sfdx force:package:version:create failed"
          fi
          exit $status

      # Wait for package replication
      - name: "Wait for package replication"
        uses: maddox/actions/sleep@master
        with:
          args: 360

      # Create scratch org
      - name: "Create scratch org"
        run: sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1

      # Deploy omnistudio to scratch org
      - name: "Deploy Omnistudio"
        run: sfdx force:package:install -p ${{ secrets.OMNISTUDIO_PACKAGEID }} -u scratch-org -w 10 -r -s=AllUsers

      # Activate metadata for omnistudio on scratch org
      - name: "Enable OmniStudio metadata"
        run: node ./configure-omnistudio-metadata scratch-org

      # Install new sfGpsDs package in scratch org
      - name: "Install new sfGpsDs package version in scratch org"
        if: ${{ github.event.client_payload.sfGpsDs == 'true' }}
        run: sfdx force:package:install -p ${{ steps.createPackageVersion-sfGpsDs.outputs.packageVersionId }} -w 10 -u scratch-org -r

      # Get current sfGpsDs package version
      - name: "Get current sfGpsDs package version"
        id: currentSfGpsDsPack
        if: ${{ github.event.client_payload.sfGpsDs == 'false' }}
        run: |
          packageVersionId=$(sfdx force:package:version:list -p 'Salesforce Global Public Sector Design Systems' -o CreatedDate --concise | tail -1 | awk '{print $3}')
          echo "::set-output name=packageVersionId::$packageVersionId"

      # Install old sfGpsDs package in scratch org
      - name: "Install current sfGpsDs package version in scratch org"
        if: ${{ github.event.client_payload.sfGpsDs == 'false' }}
        run: sfdx force:package:install -p ${{ steps.currentSfGpsDsPack.outputs.packageVersionId }} -w 10 -u scratch-org -r

      # Install new sfGpsDsAuNsw package in scratch org
      - name: "Install new sfGpsDsAuNsw package version in scratch org"
        if: ${{ github.event.client_payload.sfGpsDsAuNsw == 'true' }}
        run: sfdx force:package:install -p ${{ steps.createPackageVersion-sfGpsDsAuNsw.outputs.packageVersionId }} -w 10 -u scratch-org -r

      # Install new sfGpsDsAuNswS package in scratch org
      - name: "Install new sfGpsDsAuNswS package version in scratch org"
        if: ${{ github.event.client_payload.sfGpsDsAuNswS == 'true' }}
        run: sfdx force:package:install -p ${{ steps.createPackageVersion-sfGpsDsAuNswS.outputs.packageVersionId }} -w 10 -u scratch-org -r

      # Install new sfGpsDsAuVic package in scratch org
      - name: "Install new sfGpsDsAuVic package version in scratch org"
        if: ${{ github.event.client_payload.sfGpsDsAuVic == 'true' }}
        run: sfdx force:package:install -p ${{ steps.createPackageVersion-sfGpsDsAuVic.outputs.packageVersionId }} -w 10 -u scratch-org -r

      # Install new sfGpsDsUkGov package in scratch org
      - name: "Install new sfGpsDsUkGov package version in scratch org"
        if: ${{ github.event.client_payload.sfGpsDsUkGov == 'true' }}
        run: sfdx force:package:install -p ${{ steps.createPackageVersion-sfGpsDsUkGov.outputs.packageVersionId }} -w 10 -u scratch-org -r

      # Update sfGpsDs package install link in readme
      - name: "Update package sfGpsDs install link in readme"
        if: ${{ github.event.client_payload.sfGpsDs == 'true' }}
        run: |
          packageVersionId="${{ steps.createPackageVersion-sfGpsDs.outputs.packageVersionId }}"
          packageLinkRegex="https:\/\/login\.salesforce\.com\/packaging\/installPackage\.apexp\?p0=[a-zA-ZA-ZA-Z0-9]{18}\" title=\"sfGpsDs\""
          newPackageLink="https://login.salesforce.com/packaging/installPackage.apexp?p0=${packageVersionId}\" title=\"sfGpsDs\""
          sed -E -i "s,${packageLinkRegex},${newPackageLink}," README.md

      # Update sfGpsDsAuNsw package install link in readme
      - name: "Update package sfGpsDsAuNsw install link in readme"
        if: ${{ github.event.client_payload.sfGpsDsAuNsw == 'true' }}
        run: |
          packageVersionId="${{ steps.createPackageVersion-sfGpsDsAuNsw.outputs.packageVersionId }}"
          packageLinkRegex="https:\/\/login\.salesforce\.com\/packaging\/installPackage\.apexp\?p0=[a-zA-ZA-ZA-Z0-9]{18}\" title=\"sfGpsDsAuNsw\""
          newPackageLink="https://login.salesforce.com/packaging/installPackage.apexp?p0=${packageVersionId}\" title=\"sfGpsDsAuNsw\""
          sed -E -i "s,${packageLinkRegex},${newPackageLink}," README.md

      # Update sfGpsDsAuNswS package install link in readme
      - name: "Update package sfGpsDsAuNswS install link in readme"
        if: ${{ github.event.client_payload.sfGpsDsAuNswS == 'true' }}
        run: |
          packageVersionId="${{ steps.createPackageVersion-sfGpsDsAuNswS.outputs.packageVersionId }}"
          packageLinkRegex="https:\/\/login\.salesforce\.com\/packaging\/installPackage\.apexp\?p0=[a-zA-ZA-ZA-Z0-9]{18}\" title=\"sfGpsDsAuNswS\""
          newPackageLink="https://login.salesforce.com/packaging/installPackage.apexp?p0=${packageVersionId}\" title=\"sfGpsDsAuNswS\""
          sed -E -i "s,${packageLinkRegex},${newPackageLink}," README.md

      # Update sfGpsDsAuVic package install link in readme
      - name: "Update package sfGpsDsAuVic install link in readme"
        if: ${{ github.event.client_payload.sfGpsDsAuVic == 'true' }}
        run: |
          packageVersionId="${{ steps.createPackageVersion-sfGpsDsAuVic.outputs.packageVersionId }}"
          packageLinkRegex="https:\/\/login\.salesforce\.com\/packaging\/installPackage\.apexp\?p0=[a-zA-ZA-ZA-Z0-9]{18}\" title=\"sfGpsDsAuVic\""
          newPackageLink="https://login.salesforce.com/packaging/installPackage.apexp?p0=${packageVersionId}\" title=\"sfGpsDsAuVic\""
          sed -E -i "s,${packageLinkRegex},${newPackageLink}," README.md

      # Update sfGpsDsUkGov package install link in readme
      - name: "Update package sfGpsDsUkGov install link in readme"
        if: ${{ github.event.client_payload.sfGpsDsUkGov == 'true' }}
        run: |
          packageVersionId="${{ steps.createPackageVersion-sfGpsDsUkGov.outputs.packageVersionId }}"
          packageLinkRegex="https:\/\/login\.salesforce\.com\/packaging\/installPackage\.apexp\?p0=[a-zA-ZA-ZA-Z0-9]{18}\" title=\"sfGpsDsUkGov\""
          newPackageLink="https://login.salesforce.com/packaging/installPackage.apexp?p0=${packageVersionId}\" title=\"sfGpsDsUkGov\""
          sed -E -i "s,${packageLinkRegex},${newPackageLink}," README.md

      # TODO: run prettier on sfdx-package.json
      #

      # Create PR for new package version(s)
      - name: "Create PR for new package version"
        id: create-pr
        uses: peter-evans/create-pull-request@v3
        with:
          title: "Released new package version(s)"
          body: "Released new package version(s)"
          author: eschweitzer78-bot <eschweitzer78-bot@users.noreply.github.com>
          commit-message: "Released new package version(s)"
          branch: "auto/release-package-version"
          token: ${{ secrets.BOT_ACCESS_TOKEN }}

      # Approve pull request
      - name: "Approve pull request"
        uses: juliangruber/approve-pull-request-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.create-pr.outputs.pull-request-number }}

      # Wait for CI to be skipped on pull request
      - name: "Wait for CI to be skipped on pull request"
        uses: maddox/actions/sleep@master
        with:
          args: 60

      # Merge pull request
      - name: "Merge pull request"
        uses: juliangruber/merge-pull-request-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.create-pr.outputs.pull-request-number }}
          method: squash

      # Housekeeping
      - name: "Delete scratch org"
        if: always()
        run: sfdx force:org:delete -p -u scratch-org
