const fs = require("fs").promises;
const path = require("path");
const postcss = require("postcss");
const postcssCustomMedia = require("postcss-custom-media");
const sass = require("sass");
const toolbox = require("node-sass-magic-importer/dist/toolbox");
const config = require("./cssgen.config");

function ignored(dir) {
  return config.ignoreDirectories?.includes(dir.name);
}

function genFile(filename) {
  const loadPaths = ["./", "node_modules", "node_modules/@gouvfr/dsfr"];

  return sass.compile(filename, {
    style: "compressed",
    loadPaths,
    importers: [
      {
        canonicalize(url) {
          if (!url.includes("*")) return null;
          return new URL("glob:" + url);
        },
        load(canonicalUrl) {
          console.log("load", canonicalUrl.pathname);
          const filePaths = toolbox.resolveGlobUrl(
            canonicalUrl.pathname,
            loadPaths
          );

          return {
            contents: (filePaths || [])
              .map((x) => `@import '${x}';`)
              .join(`\n`),
            syntax: "scss"
          };
        }
      }
    ]
  });
}

async function* walk(dir) {
  for await (const d of await fs.opendir(dir)) {
    const entry = path.join(dir, d.name);
    if (d.isDirectory() && !ignored(d)) yield* walk(entry);
    else if (d.isFile() && d.name === ".cssgen.json") yield entry;
  }
}

async function main() {
  for await (const p of walk(".")) {
    console.log(`handling ${p}`);

    fs.readFile(p)
      .then(async (data) => {
        let dot = path.dirname(p);
        let config = JSON.parse(data);

        console.log(`dot ${dot}`);

        // eslint-disable-next-line guard-for-in
        for (const directory in config) {
          console.log(`Looking at directory ${directory}`);
          let hasStar = directory.endsWith("*");
          let hasCssExt =
            directory.endsWith(".css") || directory.endsWith(".css*");
          let file = hasStar ? directory.slice(0, -1) : directory; // scss and css file will be named just like their containing folder
          let fileInDirectory = directory.indexOf("/") >= 0;

          const targetDir = fileInDirectory ? dot : dot + "/" + directory;
          let targetFile = `${targetDir}/${file}${hasCssExt ? "" : ".scss"}`;

          let content = genFile(targetFile).css;
          let genFileExtension = "css";

          /* go through configured content replacements */

          for (const replacement of config[directory]) {
            if (replacement.extension) {
              // special case if the object has the extension attribute it's about setting the file extension
              // and not a replacement directive
              genFileExtension = replacement.extension;
              continue;
            } else if (replacement.target) {
              // special case if the object has the extension attribute it's about setting the file extension
              // and not a replacement directive
              file = replacement.target;
              fileInDirectory = true;
              continue;
            }

            let regexFrom = new RegExp(replacement.from, "gm");
            content = content.replaceAll(regexFrom, replacement.to);
          }

          /* use postcss to remove custom media generated by VIC2 */

          // eslint-disable-next-line no-await-in-loop
          const pContent = await postcss([postcssCustomMedia()]).process(
            content
          );

          // eslint-disable-next-line no-await-in-loop
          await fs.writeFile(
            fileInDirectory
              ? `${dot}/${file}${hasStar ? "" : ".gen"}.${genFileExtension}`
              : `${dot}/${directory}/${file}${hasStar ? "" : ".gen"}.${genFileExtension}`,
            pContent.css,
            (err) => {
              if (err) throw err;
            }
          );
        }
      })
      // eslint-disable-next-line no-loop-func
      .catch((err) => {
        console.log(err);
        // eslint-disable-next-line no-undef
        process.exit(1);
      });
  }
}

main();
